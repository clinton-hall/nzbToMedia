# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python27:
        python.version: '2.7'
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 4

  steps:
  #- script: |
      # Make sure all packages are pulled from latest
      #sudo apt-get update

      # Fail out if any setups fail
      #set -e

      # Delete old Pythons
      #rm -rf $AGENT_TOOLSDIRECTORY/Python/2.7.16
      #rm -rf $AGENT_TOOLSDIRECTORY/Python/3.5.7
      #rm -rf $AGENT_TOOLSDIRECTORY/Python/3.7.3

      # Download new Pythons
      #azcopy --recursive \
        #--source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/2.7.15 \
        #--destination $AGENT_TOOLSDIRECTORY/Python/2.7.15

      #azcopy --recursive \
        #--source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/3.5.5 \
        #--destination $AGENT_TOOLSDIRECTORY/Python/3.5.5

      #azcopy --recursive \
        #--source https://vstsagenttools.blob.core.windows.net/tools/hostedtoolcache/linux/Python/3.7.2 \
        #--destination $AGENT_TOOLSDIRECTORY/Python/3.7.2

      # Install new Pythons
      #original_directory=$PWD
      #setups=$(find $AGENT_TOOLSDIRECTORY/Python -name setup.sh)
      #for setup in $setups; do
          #chmod +x $setup;
          #cd $(dirname $setup);
          #./$(basename $setup);
          #cd $original_directory;
      #done;
    #displayName: 'Workaround: update apt and roll back Python versions'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip
    displayName: 'Install dependencies'

  - script: sudo apt-get install ffmpeg
    displayName: 'Install ffmpeg'

  - script: |
      pip install pytest
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      rm -rf .git
      python cleanup.py
      python TorrentToMedia.py
      python nzbToMedia.py
    displayName: 'Test source install cleanup'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Publish'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'
